--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: 
- !ruby/object:RI::MethodSummary 
  name: new
comment: 
- !ruby/struct:SM::Flow::H 
  level: 1
  text: BuildingBlock
- !ruby/struct:SM::Flow::P 
  body: Build content programatically with Ruby and Ruby's blocks.
- !ruby/struct:SM::Flow::VERB 
  body: "  require 'facets'\n  require 'xmlhelper'\n\n  builder = BuildingBlock.new(XMLHelper, :element)\n\n  doc = builder.html do\n\n    head do\n      title &quot;Test&quot;\n    end\n\n    body do\n      i &quot;Hello&quot;\n      br\n      text &quot;Test&quot;\n      text &quot;Hey&quot;\n    end\n\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: <em>produces</em>
- !ruby/struct:SM::Flow::VERB 
  body: "  &lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;&lt;body&gt;<em>Hello</em>&lt;br /&gt;TestHey&lt;/body&gt;&lt;/html&gt;\n"
- !ruby/struct:SM::Flow::P 
  body: All calls within the block are routed via the Helper Module's constructor method (#element in the above example) unless they are defined by the helper module, in which case they are sent to the helper module directly. The results of these invocations are appended to the output buffer. To prevent this, prefix the method with 'call_'.
- !ruby/struct:SM::Flow::P 
  body: "Sometimes keywords can get in the way of a construction. In these cases you can ensure use of constructor method by calling the special #build! command. You can also add verbatium text to the output via the #&lt;&lt; operator. Some common Ruby's built-in methods treated as keywords:"
- !ruby/struct:SM::Flow::VERB 
  body: "     inspect\n     instance_eval\n     respond_to?\n     singleton_method_undefined\n     initialize\n     method_missing\n     to_str\n     to_s\n"
- !ruby/struct:SM::Flow::P 
  body: "And a few other speciality methods besides:"
- !ruby/struct:SM::Flow::VERB 
  body: "     to_buffer\n     build!\n     &lt;&lt;\n"
- !ruby/struct:SM::Flow::P 
  body: This work was of course inspired by many great minds, and represents a concise and simple means of accomplishing this pattern of design, which is unique to Ruby.
constants: 
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: "NOTE: When debugging, you may want to add the 'p' entry. TODO: There may be other methods that need to be in this exception list."
  name: ESCAPE
  value: "[     'singleton_method_undefined',     'respond_to?',     'instance_eval',     'inspect',     'initialize'"
full_name: BuildingBlock
includes: []

instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: "<<"
- !ruby/object:RI::MethodSummary 
  name: build!
- !ruby/object:RI::MethodSummary 
  name: inspect
- !ruby/object:RI::MethodSummary 
  name: method_missing
- !ruby/object:RI::MethodSummary 
  name: to_buffer
- !ruby/object:RI::MethodSummary 
  name: to_s
- !ruby/object:RI::MethodSummary 
  name: to_str
name: BuildingBlock
superclass: Object
