--- !ruby/object:RI::ClassDescription 
attributes: 
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: entity control option (true, false)
  name: allow_numbered_entities
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: tags and attributes that are allowed
  - !ruby/struct:SM::Flow::P 
    body: Eg.
  - !ruby/struct:SM::Flow::VERB 
    body: "  {\n    'a' =&gt; ['href', 'target'],\n    'b' =&gt; [],\n    'img' =&gt; ['src', 'width', 'height', 'alt']\n  }\n"
  name: allowed
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: entity control option (amp, gt, lt, quot, etc.)
  name: allowed_entities
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: protocols which are allowed (http, ftp, mailto)
  name: allowed_protocols
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: tags which must always have seperate opening and closing tags (e.g. &quot;&quot;)
  name: always_close
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: should we try and make a b tag out of &quot;b&gt;&quot; (true, false)
  name: always_make_tags
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: tags which should always be self-closing (e.g. &quot;&lt;img /&gt;&quot;)
  name: no_close
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: attributes which should be checked for valid protocols (src,href)
  name: protocol_attributes
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: tags which should be removed if they contain no content (e.g. &quot;&quot; or &quot;&lt;b /&gt;&quot;)
  name: remove_blanks
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: should we remove comments? (true, false)
  name: strip_comments
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: internal tag counter
  name: tag_counts
  rw: R
class_methods: 
- !ruby/object:RI::MethodSummary 
  name: new
comment: 
- !ruby/struct:SM::Flow::H 
  level: 1
  text: HtmlFilter
- !ruby/struct:SM::Flow::P 
  body: HTML Filter library can be used to sanitize and sterilize HTML. A good idea if you let users submit HTML in comments, for instance.
- !ruby/struct:SM::Flow::P 
  body: lib_filter.php, v1.15 by Cal Henderson &lt;cal@iamcal.com&gt;
- !ruby/struct:SM::Flow::P 
  body: This code is licensed under a Creative Commons Attribution-ShareAlike 2.5 License http://creativecommons.org/licenses/by-sa/2.5/
- !ruby/struct:SM::Flow::P 
  body: Thanks to Jang Kim for adding support for single quoted attributes.
- !ruby/struct:SM::Flow::H 
  level: 2
  text: Reference
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: http://iamcal.com/publish/articles/php/processing_html/
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: http://iamcal.com/publish/articles/php/processing_html_part_2/
  type: :BULLET
constants: 
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: default settings
  name: DEFAULT
  value: "{     'allowed' => {       'a'   => ['href', 'target'],       'b'   => [],       'i'   => [],       'img' => ['src', 'width', 'height', 'alt']"
full_name: HtmlFilter
includes: 
- !ruby/object:RI::IncludedModule 
  name: Multiton
instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: balance_html
- !ruby/object:RI::MethodSummary 
  name: check_entity
- !ruby/object:RI::MethodSummary 
  name: check_tags
- !ruby/object:RI::MethodSummary 
  name: decode_dec_entity
- !ruby/object:RI::MethodSummary 
  name: decode_entities
- !ruby/object:RI::MethodSummary 
  name: decode_hex_entity
- !ruby/object:RI::MethodSummary 
  name: decode_num_entity
- !ruby/object:RI::MethodSummary 
  name: escape_comments
- !ruby/object:RI::MethodSummary 
  name: escape_special_chars
- !ruby/object:RI::MethodSummary 
  name: filter
- !ruby/object:RI::MethodSummary 
  name: fix_case
- !ruby/object:RI::MethodSummary 
  name: fix_case_inner
- !ruby/object:RI::MethodSummary 
  name: is_valid_entity
- !ruby/object:RI::MethodSummary 
  name: process_param_protocol
- !ruby/object:RI::MethodSummary 
  name: process_remove_blanks
- !ruby/object:RI::MethodSummary 
  name: process_tag
- !ruby/object:RI::MethodSummary 
  name: strip_single
- !ruby/object:RI::MethodSummary 
  name: validate_entities
name: HtmlFilter
superclass: Object
