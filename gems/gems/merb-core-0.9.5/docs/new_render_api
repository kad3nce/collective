## TEMPLATES

# Render an action
render :symbol

# Render a string
render "string"

# Render an object; will call to_#{content-type} on this if the default template is not found
display @obj

# Provide an alternative default thing to render; note that we can use strings here for template paths
# because strings would never fail and fallback to the @obj
display @obj, :symbol
display @obj, "full/path/to/template"

# Render a template
render_template "full/path/to/template"

# Render with a mime-type (same as render, but with added mime-type set)
render_json :symbol
render_json "string"

# Render nothing at all
render_nothing

# TEMPLATE OPTIONS (all functions above can use these options)

# :format can be used to override the mime-type arrived at via content-negotiation
render :symbol, :format => :xml

# :status can set the status that will be returned to the browser
render :symbol, :status => Successful::Accepted
# or
render :symbol, :status => 202

# :layout sets the layout to use; default: controller.to_path || :application; :none means no layout
render :symbol, :layout => :none

## PARTIALS

# Render a partial
partial :symbol

# Render a partial with an object (it will default to the local var "symbol" in the partial)
partial :symbol, :with => @object
partial :symbol, :with => @object, :as => "something"

# Render a partial with a collection of objects (same :as semantics)
partial :symbol, :with => [col, lec, tion]
partial :symbol, :with => [col, lec, tion], :as => "name"